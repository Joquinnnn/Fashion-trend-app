# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jiUIhi6VmbY_6mYPjpGL7dzk5C5s63YX
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
# --- IMPORT TAMBAHAN UNTUK EVALUASI ---
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# -----------------------------------------------------------------
# KONFIGURASI HALAMAN
# -----------------------------------------------------------------
st.set_page_config(
    page_title="FashionTrendChecker (Real Model)",
    page_icon="ðŸ‘•",
    layout="wide"
)

# -----------------------------------------------------------------
# FUNGSI MODEL PREDIKSI
# -----------------------------------------------------------------
def get_production_recommendation(predicted_demand, safety_stock_pct):
    safety_stock_units = predicted_demand * (safety_stock_pct / 100)
    recommended_quantity = predicted_demand + safety_stock_units
    return int(recommended_quantity), int(safety_stock_units)


# -----------------------------------------------------------------
# --- 1. LOAD DATA TRAINING ---
# -----------------------------------------------------------------
@st.cache_data
def load_and_train_model():
    """
    Fungsi ini membaca data historis dan melatih model regresi.
    Model ini dilatih pada 100% data untuk prediksi MASA DEPAN.
    """
    try:
        df = pd.read_csv("data_sample.csv")
    except FileNotFoundError:
        st.error("ERROR: File 'data_sample.csv' tidak ditemukan. Pastikan file ada di folder yang sama.")
        return None, None, None

    # --- 2. TRAIN MODEL (Simulasi Backend 'Demand Forecasting Model') ---

    # Tentukan fitur (X) dan target (y)
    # Kita gunakan 'Month', 'TrendScore', dan 'USD_IDR' untuk memprediksi 'Sales'
    features = ['Month', 'TrendScore', 'USD_IDR']
    target = 'Sales'

    X_train = df[features]
    y_train = df[target]

    # Latih model Linear Regression sederhana
    model = LinearRegression()
    model.fit(X_train, y_train)

    return model, df, features, target

# Load data dan latih model
# Kita tambahkan 'features' dan 'target' agar bisa dipakai di bagian evaluasi
model, df_history, features, target = load_and_train_model()

if model is None:
    st.stop()

# -----------------------------------------------------------------
# UI - SIDEBAR (Input untuk Prediksi Bulan Depan)
# -----------------------------------------------------------------
st.sidebar.header("Parameter Prediksi (Bulan Depan)")
st.sidebar.info("Model ML telah dilatih menggunakan data historis. Masukkan data untuk prediksi bulan ke-11.")

# Ambil bulan terakhir dari data
last_month = df_history['Month'].max()
next_month = last_month + 1

st.sidebar.subheader("1. Data Tren (dari 'Trend Scraper')")
next_trend_score = st.sidebar.slider(
    f"Prediksi Skor Tren (Bulan {next_month})",
    min_value=0.0, max_value=1.0, value=0.9, step=0.05,
    help="Skor tren yang diprediksi oleh 'Trend Scoring Model' Anda."
)

st.sidebar.subheader("2. Data Ekonomi (dari 'Macro Integrator')")
# Ambil nilai USD_IDR terakhir sebagai default
default_usd_idr = df_history['USD_IDR'].iloc[-1]
next_usd_idr = st.sidebar.number_input(
    f"Prediksi Kurs USD/IDR (Bulan {next_month})",
    min_value=14000, max_value=17000, value=int(default_usd_idr), step=10,
    help="Prediksi kurs dari 'Macroeconomic Data Integrator'."
)

st.sidebar.subheader("3. Parameter Bisnis")
safety_stock_percent = st.sidebar.slider(
    "Persentase Safety Stock (%)",
    min_value=0, max_value=50, value=20,
    help="Cadangan produksi untuk menghindari kehabisan stok."
)


# -----------------------------------------------------------------
# UI - HALAMAN UTAMA (Dashboard)
# -----------------------------------------------------------------
st.title("ðŸ‘• FashionTrendChecker (Model Aktif)")
st.subheader(f"Prediksi Permintaan untuk Bulan ke-{next_month} Menggunakan Model ML")
st.markdown("---")

# -----------------------------------------------------------------
# --- 3. BUAT PREDIKSI ---
# -----------------------------------------------------------------

# Siapkan data input untuk prediksi
# Formatnya harus sama dengan X_train: ['Month', 'TrendScore', 'USD_IDR']
input_features = pd.DataFrame({
    'Month': [next_month],
    'TrendScore': [next_trend_score],
    'USD_IDR': [next_usd_idr]
})

# Lakukan prediksi
pred_demand = model.predict(input_features)[0]
pred_demand = int(pred_demand) # Bulatkan

# Hitung rekomendasi
reco_prod, safety_units = get_production_recommendation(pred_demand, safety_stock_percent)

# -----------------------------------------------------------------
# --- 4. TAMPILKAN HASIL PREDIKSI ---
# -----------------------------------------------------------------
st.header("Hasil Analisis: Prediksi & Rekomendasi Produksi ðŸŽ¯")

# Tampilkan metrik utama
col1, col2 = st.columns(2)
with col1:
    st.metric(
        label=f"Prediksi Permintaan Pasar (Bulan {next_month})",
        value=f"{pred_demand} unit"
    )
    st.caption(f"""
    Berdasarkan model ML yang dilatih,
    dengan skor tren {next_trend_score} dan kurs {next_usd_idr},
    diprediksi akan ada permintaan sebesar **{pred_demand} unit**.
    """)

with col2:
    st.metric(
        label="âœ… REKOMENDASI PRODUKSI (Unit)",
        value=f"{reco_prod} unit",
        delta=f"+{safety_units} unit (Safety Stock {safety_stock_percent}%)"
    )
    st.caption(f"""
    Disarankan untuk memproduksi **{reco_prod} unit**.
    Angka ini mencakup prediksi permintaan ({pred_demand} unit)
    ditambah cadangan keamanan ({safety_units} unit).
    """)

st.markdown("---")

# -----------------------------------------------------------------
# --- 5. TAMPILKAN VISUALISASI ---
# -----------------------------------------------------------------

# Visualisasi Risiko Overproduction
st.subheader("Visualisasi Risiko: Target Produksi vs Overproduction")

avg_historical_sales = df_history['Sales'].mean()
max_gauge_value = max(avg_historical_sales * 2.5, reco_prod * 1.5)

fig_gauge = go.Figure(go.Indicator(
    mode = "gauge+number+delta",
    value = reco_prod,
    title = {'text': "Rekomendasi Produksi (Unit)"},
    delta = {'reference': pred_demand},
    gauge = {
        'axis': {'range': [0, max_gauge_value]},
        'bar': {'color': "green"},
        'steps' : [
            {'range': [0, pred_demand * 0.9], 'color': "rgba(255, 165, 0, 0.2)"},
            {'range': [pred_demand * 0.9, pred_demand], 'color': "rgba(144, 238, 144, 0.5)"},
            {'range': [pred_demand, reco_prod], 'color': "rgba(0, 128, 0, 0.7)"},
            {'range': [reco_prod, max_gauge_value], 'color': "rgba(255, 0, 0, 0.4)"}
        ],
        'threshold' : {
            'line': {'color': "red", 'width': 4}, 'thickness': 0.75, 'value': pred_demand
        }
    }
))
fig_gauge.add_annotation(
    x=0.5, y=0.35,
    text=f"Prediksi Permintaan: {pred_demand} unit",
    showarrow=False,
    font=dict(size=14, color="#333333")
)
st.plotly_chart(fig_gauge, use_container_width=True)

st.warning(f"""
**Analisis Risiko:**
* **Zona Permintaan ({pred_demand} unit):** Ini adalah jumlah yang diprediksi akan laku.
* **Zona Target Produksi ({pred_demand} - {reco_prod} unit):** Ini adalah area produksi ideal, mencakup permintaan + safety stock.
* **Zona Merah (> {reco_prod} unit):** Berisiko **Overproduction**.
""")

st.markdown("---")

# -----------------------------------------------------------------
# --- 6. TAMPILKAN DATA HISTORIS (UNTUK KONTEKS) ---
# -----------------------------------------------------------------
st.subheader("Data Historis yang Digunakan untuk Melatih Model")
st.dataframe(df_history, use_container_width=True)

# Grafik Data Historis
fig_history = go.Figure()

# Tambahkan trace untuk Sales
fig_history.add_trace(go.Scatter(
    x=df_history['Month'],
    y=df_history['Sales'],
    mode='lines+markers',
    name='Penjualan (Unit)',
    line=dict(color='blue', width=3)
))

# Tambahkan trace untuk Trend Score (di sumbu Y kedua)
fig_history.add_trace(go.Scatter(
    x=df_history['Month'],
    y=df_history['TrendScore'],
    mode='lines',
    name='Skor Tren (0-1)',
    yaxis='y2', # Tentukan untuk menggunakan sumbu Y kedua
    line=dict(color='green', dash='dot')
))

# Atur layout
fig_history.update_layout(
    title='Tren Penjualan Historis vs. Skor Tren',
    xaxis_title='Bulan',
    yaxis_title='Penjualan (Unit)',
    yaxis=dict(title='Penjualan (Unit)', color='blue'),
    yaxis2=dict(
        title='Skor Tren (0-1)',
        color='green',
        overlaying='y', # Tumpang tindih dengan y
        side='right', # Posisikan di kanan
        range=[0, 1] # Set rentang 0-1
    ),
    legend=dict(x=0.1, y=0.9)
)

st.plotly_chart(fig_history, use_container_width=True)
st.caption("Grafik ini menunjukkan bagaimana Skor Tren (garis hijau) berkorelasi dengan Penjualan (garis biru). Model ML belajar dari pola ini.")

# -----------------------------------------------------------------
# --- 7. BAGIAN EVALUASI MODEL (BARU) ---
# -----------------------------------------------------------------
st.markdown("---")
st.header("Hasil Uji Coba & Evaluasi Model")

with st.expander("Klik untuk melihat detail evaluasi ðŸ”¬"):

    st.markdown("""
    Untuk menguji seberapa baik model ini, kita membagi data historis
    menjadi **80% data training** dan **20% data testing**.
    Model *evaluasi* dilatih hanya pada data training dan diuji pada data testing
    untuk mengukur kinerjanya.

    **(Catatan: Model untuk prediksi utama di atas tetap dilatih pada 100% data untuk akurasi maksimal).**
    """)

    # 1. Ambil X dan y dari data historis
    X = df_history[features]
    y = df_history[target]

    # 2. Bagi data (80% train, 20% test)
    # random_state=42 agar hasil pembagiannya selalu sama
    X_train_eval, X_test_eval, y_train_eval, y_test_eval = train_test_split(
        X, y, test_size=0.2, random_state=42
    )

    # 3. Latih model evaluasi (HANYA PADA DATA TRAIN 80%)
    model_eval = LinearRegression()
    model_eval.fit(X_train_eval, y_train_eval)

    # 4. Lakukan prediksi pada data test (20%)
    y_pred_eval = model_eval.predict(X_test_eval)

    # 5. Hitung metrik evaluasi
    mae = mean_absolute_error(y_test_eval, y_pred_eval)
    rmse = np.sqrt(mean_squared_error(y_test_eval, y_pred_eval))
    r2 = r2_score(y_test_eval, y_pred_eval)

    st.subheader("Metrik Evaluasi Model (pada 20% Data Test)")
    mcol1, mcol2, mcol3 = st.columns(3)
    mcol1.metric("RÂ² (R-squared)", f"{r2:.2f}")
    mcol2.metric("MAE (Mean Absolute Error)", f"{mae:.2f} unit")
    mcol3.metric("RMSE (Root Mean Sq. Error)", f"{rmse:.2f} unit")

    st.caption(
        "**RÂ²**: Seberapa baik model menjelaskan data (1.0 = sempurna). "
        "**MAE/RMSE**: Rata-rata kesalahan prediksi (semakin kecil semakin baik)."
    )
    st.markdown("---")

    # 6. Tampilkan contoh Actual vs Predicted
    st.subheader("Contoh Hasil Prediksi (Data Test)")
    results_df = pd.DataFrame({
        'Penjualan Aktual': y_test_eval,
        'Prediksi Model': y_pred_eval.round(0)
    })
    st.dataframe(results_df, use_container_width=True)

    # 7. Visualisasi Actual vs Predicted
    st.subheader("Visualisasi: Aktual vs. Prediksi")
    fig_eval = go.Figure()
    # Scatter plot
    fig_eval.add_trace(go.Scatter(
        x=y_test_eval,
        y=y_pred_eval,
        mode='markers',
        name='Data Test'
    ))
    # Garis ideal (y=x)
    fig_eval.add_trace(go.Scatter(
        x=[y_test_eval.min(), y_test_eval.max()],
        y=[y_test_eval.min(), y_test_eval.max()],
        mode='lines',
        name='Prediksi Ideal (Aktual = Prediksi)',
        line=dict(color='red', dash='dash')
    ))
    fig_eval.update_layout(
        title='Perbandingan Penjualan Aktual vs. Prediksi Model',
        xaxis_title='Penjualan Aktual (Unit)',
        yaxis_title='Penjualan Prediksi (Unit)'
    )
    st.plotly_chart(fig_eval, use_container_width=True)
    st.caption("Semakin dekat titik-titik biru ke garis merah, semakin akurat prediksinya.")